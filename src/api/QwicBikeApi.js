/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CompareBikeRequest', 'model/CompareQwicBikeResponse', 'model/CreateBikeRequest', 'model/CreateBikeResponse', 'model/QwicBikeModelResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CompareBikeRequest'), require('../model/CompareQwicBikeResponse'), require('../model/CreateBikeRequest'), require('../model/CreateBikeResponse'), require('../model/QwicBikeModelResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.QwicBikeApi = factory(root.Api.ApiClient, root.Api.CompareBikeRequest, root.Api.CompareQwicBikeResponse, root.Api.CreateBikeRequest, root.Api.CreateBikeResponse, root.Api.QwicBikeModelResponse);
  }
}(this, function(ApiClient, CompareBikeRequest, CompareQwicBikeResponse, CreateBikeRequest, CreateBikeResponse, QwicBikeModelResponse) {
  'use strict';

  /**
   * QwicBike service.
   * @module api/QwicBikeApi
   * @version 0.0.1
   */

  /**
   * Constructs a new QwicBikeApi. 
   * @alias module:api/QwicBikeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the compareQwicBike operation.
     * @callback module:api/QwicBikeApi~compareQwicBikeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompareQwicBikeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare a QWIC bike, it will check whether the bike's MID meets the usage regulations. - `spec_id`: spec of bike. if didn't have spec_id, could be **null**. - `parts`: bike equipped part specs. only allow parts produced by Hyena or Brose. - There are 5 types:   - Type 1: No changed any part specs   - Type 2: New bike or change all part specs   - Type 3: Have changes part specs   - Type 4: Different bike of components   - Type 5: Wrong part number
     * @param {String} version api version
     * @param {module:model/CompareBikeRequest} body compare qwic bike body parameters
     * @param {module:api/QwicBikeApi~compareQwicBikeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompareQwicBikeResponse}
     */
    this.compareQwicBike = function(version, body, callback) {
      var postBody = body;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling compareQwicBike");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling compareQwicBike");
      }

      var pathParams = {
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = [];
      var accepts = ['*/*', 'application/json'];
      var returnType = CompareQwicBikeResponse;
      return this.apiClient.callApi(
        '/{version}/bike/compare', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQwicBike operation.
     * @callback module:api/QwicBikeApi~createQwicBikeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBikeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a QWIC bike. - `vin`: frame number of bike. - `spec_id`: spec of bike. if didn't have spec_id, could be **null**. - `parts`: bike equipped part specs. only allow parts produced by Hyena or Brose.
     * @param {String} version api version
     * @param {module:model/CreateBikeRequest} body create qwic bike body parameters
     * @param {module:api/QwicBikeApi~createQwicBikeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBikeResponse}
     */
    this.createQwicBike = function(version, body, callback) {
      var postBody = body;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling createQwicBike");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createQwicBike");
      }

      var pathParams = {
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = [];
      var accepts = ['*/*', 'application/json'];
      var returnType = CreateBikeResponse;
      return this.apiClient.callApi(
        '/{version}/bike/qwic', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQwicBikeModel operation.
     * @callback module:api/QwicBikeApi~getQwicBikeModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QwicBikeModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QWIC's bike model from QWIC API
     * @param {String} version api version
     * @param {String} vin frame number
     * @param {module:api/QwicBikeApi~getQwicBikeModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QwicBikeModelResponse}
     */
    this.getQwicBikeModel = function(version, vin, callback) {
      var postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getQwicBikeModel");
      }
      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getQwicBikeModel");
      }

      var pathParams = {
        'version': version,
        'vin': vin
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Authorization'];
      var contentTypes = [];
      var accepts = ['*/*', 'application/json'];
      var returnType = QwicBikeModelResponse;
      return this.apiClient.callApi(
        '/{version}/bike_model/qwic/{vin}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
