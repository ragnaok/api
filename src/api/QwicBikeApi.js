/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompareBikeRequest from '../model/CompareBikeRequest';
import CompareQwicBikeResponse from '../model/CompareQwicBikeResponse';
import CreateBikeRequest from '../model/CreateBikeRequest';
import CreateBikeResponse from '../model/CreateBikeResponse';
import QwicBikeModelResponse from '../model/QwicBikeModelResponse';

/**
* QwicBike service.
* @module api/QwicBikeApi
* @version 0.0.1
*/
export default class QwicBikeApi {

    /**
    * Constructs a new QwicBikeApi. 
    * @alias module:api/QwicBikeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the compareQwicBike operation.
     * @callback module:api/QwicBikeApi~compareQwicBikeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompareQwicBikeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare a qwic bike
     * @param {String} version api version
     * @param {module:model/CompareBikeRequest} body compare qwic bike body parameters
     * @param {module:api/QwicBikeApi~compareQwicBikeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompareQwicBikeResponse}
     */
    compareQwicBike(version, body, callback) {
      let postBody = body;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling compareQwicBike");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling compareQwicBike");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = CompareQwicBikeResponse;
      return this.apiClient.callApi(
        '/{version}/bike/compare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQwicBike operation.
     * @callback module:api/QwicBikeApi~createQwicBikeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBikeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a qwic bike
     * @param {String} version api version
     * @param {module:model/CreateBikeRequest} body create qwic bike body parameters
     * @param {module:api/QwicBikeApi~createQwicBikeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBikeResponse}
     */
    createQwicBike(version, body, callback) {
      let postBody = body;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling createQwicBike");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createQwicBike");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = CreateBikeResponse;
      return this.apiClient.callApi(
        '/{version}/bike/qwic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQwicBikeModel operation.
     * @callback module:api/QwicBikeApi~getQwicBikeModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QwicBikeModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a qwic bike model
     * @param {String} version api version
     * @param {String} vin frame number
     * @param {module:api/QwicBikeApi~getQwicBikeModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QwicBikeModelResponse}
     */
    getQwicBikeModel(version, vin, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getQwicBikeModel");
      }
      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getQwicBikeModel");
      }

      let pathParams = {
        'version': version,
        'vin': vin
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = QwicBikeModelResponse;
      return this.apiClient.callApi(
        '/{version}/bike_model/qwic/{vin}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
