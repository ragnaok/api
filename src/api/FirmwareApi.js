/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetFirmwareFileResponse from '../model/GetFirmwareFileResponse';
import QueryFirmwareResponse from '../model/QueryFirmwareResponse';

/**
* Firmware service.
* @module api/FirmwareApi
* @version 0.0.1
*/
export default class FirmwareApi {

    /**
    * Constructs a new FirmwareApi. 
    * @alias module:api/FirmwareApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFirmwareFile operation.
     * @callback module:api/FirmwareApi~getFirmwareFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFirmwareFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get firmware file
     * @param {String} version api version
     * @param {Number} firmwareId firmware id
     * @param {module:api/FirmwareApi~getFirmwareFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFirmwareFileResponse}
     */
    getFirmwareFile(version, firmwareId, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getFirmwareFile");
      }
      // verify the required parameter 'firmwareId' is set
      if (firmwareId === undefined || firmwareId === null) {
        throw new Error("Missing the required parameter 'firmwareId' when calling getFirmwareFile");
      }

      let pathParams = {
        'version': version,
        'firmware_id': firmwareId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = GetFirmwareFileResponse;
      return this.apiClient.callApi(
        '/{version}/firmware/{firmware_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryFirmwareList operation.
     * @callback module:api/FirmwareApi~queryFirmwareListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryFirmwareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query firmware list
     * @param {String} version api version
     * @param {String} partNum part number
     * @param {String} fwVer firmware version
     * @param {module:api/FirmwareApi~queryFirmwareListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryFirmwareResponse}
     */
    queryFirmwareList(version, partNum, fwVer, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling queryFirmwareList");
      }
      // verify the required parameter 'partNum' is set
      if (partNum === undefined || partNum === null) {
        throw new Error("Missing the required parameter 'partNum' when calling queryFirmwareList");
      }
      // verify the required parameter 'fwVer' is set
      if (fwVer === undefined || fwVer === null) {
        throw new Error("Missing the required parameter 'fwVer' when calling queryFirmwareList");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'part_num': partNum,
        'fw_ver': fwVer
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = QueryFirmwareResponse;
      return this.apiClient.callApi(
        '/{version}/firmware', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
