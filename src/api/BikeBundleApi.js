/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueryBikeBundleResponse from '../model/QueryBikeBundleResponse';

/**
* BikeBundle service.
* @module api/BikeBundleApi
* @version 0.0.1
*/
export default class BikeBundleApi {

    /**
    * Constructs a new BikeBundleApi. 
    * @alias module:api/BikeBundleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryBikeBundle operation.
     * @callback module:api/BikeBundleApi~queryBikeBundleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryBikeBundleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query bike bundle
     * @param {String} version api version
     * @param {Object} opts Optional parameters
     * @param {String} opts.mid mid
     * @param {String} opts.bikeId bike id
     * @param {String} opts.partType part type
     * @param {module:api/BikeBundleApi~queryBikeBundleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryBikeBundleResponse}
     */
    queryBikeBundle(version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling queryBikeBundle");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'mid': opts['mid'],
        'bike_id': opts['bikeId'],
        'part_type': opts['partType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = QueryBikeBundleResponse;
      return this.apiClient.callApi(
        '/{version}/bike/bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
